# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.

swagger: '2.0'

# This is your document metadata
info:
  version: "0.2.1"
  title: API for Qcit

# Describe your paths here
paths:
    
  /users/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a user whith his ID, which must be his own (after being logged in).
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          description: ID of user that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: This can only be done by the logged in user for his own account.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid ID supplied
        
    put:
      tags:
        - user
      summary: Find user by ID
      description: Update the User informations
      operationId: UpdateUserById
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be update
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
        "403":
          description: Permission refused 

  /users/{userId}/paths:
    get:
      tags:
        - user
      summary: Find user's paths
      description: Reutrns all user's paths
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          description: Id of the user
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
        "401":
          description: User is not login
        "403":
          description: Permission refused
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Path"
        "204":
          description: User does not have path
  
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: User
          description: Created user object
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
    
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          description: The email for login
          required: false
          type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
          
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
      responses:
        default:
          description: successful operation
  
  /paths/{pathId}:
    get:
      tags:
        - path
      summary: Find path by ID
      description: Returns a path whith his ID
      produces:
        - application/json
      parameters:
        - in: path
          name: pathId
          description: ID of path
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Path not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Path"
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - path
      summary: Delete path by ID
      description: ""
      operationId: deletePath
      produces:
        - application/json
      parameters:
        - in: path
          name: pathId
          description: ID of the path that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Path not found
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - path
      summary: Update path
      description: This can only be done by the logged in user.
      operationId: updatePath
      produces:
        - application/json
      parameters:
        - in: path
          name: pathId
          description: ID of the path that needs to be deleted
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Created path object
          required: false
          schema:
            $ref: "#/definitions/Path"
      responses:
        "404":
          description: Path not found
        "200":
          description: successful operation
        "403":
          description: Permission refused 

  /paths:
    post:
      tags:
        - path
      summary: Create path
      description: This can only be done by the logged in user.
      operationId: createPath
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created path object
          required: false
          schema:
            $ref: "#/definitions/Path"
      responses:
        default:
          description: successful operation

  /transport/line/{lineId}:
    get:
      tags:
        - network
      summary: Find line by ID
      description: Returns a line whith his ID
      produces:
        - application/json
      parameters:
        - in: path
          name: lineId
          description: ID of line
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Path not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/TransportLine"
        "400":
          description: Invalid ID supplied
          
  /transport/stop/{stopId}:
    get:
      tags:
        - network
      summary: Find stop by ID
      description: Returns a stop whith his ID
      produces:
        - application/json
      parameters:
        - in: path
          name: stopId
          description: ID of stop
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Stop not found
        "400":
          description: Invalid ID supplied
  

definitions:

  User:
    type: object
    required:
      - id
      - email
      - password
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      tokenDevice:
        type: string
 
  
  TransportStop:
    type: object
    required:
      - id
      - name
      - line
      - typeTransport
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      line:
        type: integer
        format: int64
      typeTransport:
        type: string # check

  TransportLine:
    type: object
    required:
      - id
      - name
      - typeTransport
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      typeTransport:
        type: integer # or object ?
        format: int64

  Path:
    type: object
    required:
      - id
      - active
      - day
      - beginHour
      - endHour
    properties:
      id:
        type: integer
        format: int64
      active:
        type: boolean
      day:
        type: integer # 1..7
      beginHour:
        type: integer # 0..23
      endHour:
        type: integer # 0..23
      subpaths:
        type: array
        items:
          $ref: "#/definitions/SubPath"

  SubPath:
    type: object
    required:
      - line
      - startStop
      - finishStop
    properties:
      line:
        type: integer
        format: int64
        type: integer
      startStop:
        $ref: "#/definitions/TransportStop"
      finishStop:
        $ref: "#/definitions/TransportStop"
